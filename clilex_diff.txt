157c157,158
< extern FILE *yyin, *yyout;
---
> // **************************
> // extern FILE *yyin, *yyout;
190c191,193
< 	FILE *yy_input_file;
---
> // ************************
> //	FILE *yy_input_file;
> 	int   yy_input_file;
255a259,270
> // **************************************
> typedef struct{
>         int  state;
>         void *getmem_adr;
>         int  size;
> }MEMALLOC;
> 
> MEMALLOC     memarray[500];
> 
> int memarray_max = 0;
> //***************************************
> 
286c301,303
< void yyrestart (FILE *input_file  );
---
> // ***************************************************
> // void yyrestart (FILE *input_file  );
>    void yyrestart (int input_file  );
288c305,307
< YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
---
> // *****************************************************
> // YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
> YY_BUFFER_STATE yy_create_buffer (int file,int size  );
296c315,317
< static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );
---
> // ******************************************************
> // static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );
> static void yy_init_buffer (YY_BUFFER_STATE b,int file  );
336c357,359
< FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
---
> // *****************************************************
> // FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
> int yyin =  0, yyout =  0;
566,572c589,603
< FILE *yyget_in (void );
< 
< void yyset_in  (FILE * in_str  );
< 
< FILE *yyget_out (void );
< 
< void yyset_out  (FILE * out_str  );
---
> // *********************
> // FILE *yyget_in (void );
> int yyget_in (void );
> 
> // *****************************
> // void yyset_in  (FILE * in_str  );
> void yyset_in  (int in_str  );
> 
> // *********************
> // FILE *yyget_out (void );
> int yyget_out (void );
> 
> // ********************************
> // void yyset_out  (FILE * out_str  );
> void yyset_out  (int out_str  );
624c655,657
< #define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
---
> //**********************************************************************
> // #define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
> #define ECHO do { if (write( 0, yytext, yyleng )) {} } while (0)
641c674
< 		if ( c == EOF && ferror( yyin ) ) \
---
> 		if ( c == EOF && 1 ) \
645,660c678,695
< 	else \
< 		{ \
< 		errno=0; \
< 		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
< 			{ \
< 			if( errno != EINTR) \
< 				{ \
< 				YY_FATAL_ERROR( "input in flex scanner failed" ); \
< 				break; \
< 				} \
< 			errno=0; \
< 			clearerr(yyin); \
< 			} \
< 		}\
< \
< 
---
> // *************************************************************************************
> // above macro changed in line: if ( c == EOF && 1 ) from: if ( c == EOF && ferror(yyin) )
> //	else \
> //		{ \
> //		errno=0; \
> //		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
> //			{ \
> //			if( errno != EINTR) \
> //				{ \
> //				YY_FATAL_ERROR( "input in flex scanner failed" ); \
> //				break; \
> //				} \
> //			errno=0; \
> //			clearerr(yyin); \
> //			} \
> //		}\
> //\
> // ***************************************************************************************
734c769,771
< 			yyin = stdin;
---
> // ************************************
> //			yyin = stdin;
> 			yyin = 0;
737c774,776
< 			yyout = stdout;
---
> // ************************************
> //			yyout = stdout;
> 			yyout = 0;
1351c1390,1392
<     void yyrestart  (FILE * input_file )
---
> // ******************************************************************
> //  void yyrestart  (FILE * input_file )
>     void yyrestart  (int input_file )
1413c1454,1456
<     YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
---
> // *************************************************************
> //  YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
>     YY_BUFFER_STATE yy_create_buffer  (int file, int  size )
1464c1507,1509
<     static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
---
> //*********************************************************************
> //  static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
>     static void yy_init_buffer  (YY_BUFFER_STATE  b, int file )
1483c1528,1530
<         b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
---
> // **********************************************************************
> //      b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
>         b->yy_is_interactive = 1;
1740c1787,1790
< FILE *yyget_in  (void)
---
> 
> // *******************
> // FILE *yyget_in  (void)
> int yyget_in  (void)
1748c1798,1801
< FILE *yyget_out  (void)
---
> 
> // *******************
> // FILE *yyget_out  (void)
> int yyget_out  (void)
1786c1839,1842
< void yyset_in (FILE *  in_str )
---
> 
> // *******************************
> // void yyset_in (FILE *  in_str )
> void yyset_in (int  in_str )
1791c1847,1849
< void yyset_out (FILE *  out_str )
---
> // *******************************
> // void yyset_out (FILE *  out_str )
> void yyset_out (int  out_str )
1824,1825c1882,1887
<     yyin = (FILE *) 0;
<     yyout = (FILE *) 0;
---
> // ************************
> //  yyin = (FILE *) 0;
> //  yyout = (FILE *) 0;
> // ***********************
>     yyin =  0;
>     yyout = 0;
1882,1883c1944,1961
< 	return (void *) malloc( size );
< }
---
> 
> // *****************************************
> //	return (void *) malloc( size );
> 
>         int z;
>         for(z=0; z<500; ++z){
>                 if(memarray[z].state)continue;
>                 else {
>                        memarray[z].state = 1;
>                        memarray[z].getmem_adr = getmem((int)size);
>                        if((int)memarray[z].getmem_adr == SYSERR)return(NULL);
>                        memarray[z].size = size;
>                        if(memarray_max < (z + 1))memarray_max = z + 1;
>                        return(memarray[z].getmem_adr);
>                 }
>               }
> }	
> // ******************************************
1894c1972,1994
< 	return (void *) realloc( (char *) ptr, size );
---
> 
> // *****************************************************
> //	return (void *) realloc( (char *) ptr, size );
>         int z;
>         for(z=0; z<memarray_max; ++z){
>             if(memarray[z].getmem_adr == ptr){
>               if(memarray[z].state)memarray[z].state = 0;
>               else continue;
>               if(freemem((struct mblock *)ptr, memarray[z].size) == SYSERR)return(NULL);
>               if(memarray_max == (z + 1))--z;
>               break;
>             }
>         }
>         for(z=0; z<500; ++z){
>          if(memarray[z].state)continue;
>          else { memarray[z].state = 1;
>                 memarray[z].getmem_adr = getmem((int)size);
>                 if((int)memarray[z].getmem_adr == SYSERR)return(NULL);
>                 memarray[z].size = size;
>                 if(memarray_max < (z + 1))memarray_max = z + 1;
>                 return(memarray[z].getmem_adr);
>          }
>         }

